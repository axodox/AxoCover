<views:View x:Class="AxoCover.Views.TestExplorerView" 
            x:TypeArguments="viewModels:TestExplorerViewModel"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
            xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
            xmlns:converters="clr-namespace:AxoCover.Converters"
            xmlns:models="clr-namespace:AxoCover.Models.Toolkit"
            xmlns:viewModels="clr-namespace:AxoCover.ViewModels"
            xmlns:views="clr-namespace:AxoCover.Views"
            xmlns:controls="clr-namespace:AxoCover.Controls"
            xmlns:res="clr-namespace:AxoCover"
            mc:Ignorable="d" d:DesignHeight="300" d:DesignWidth="300">
  <UserControl.Resources>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    <converters:BooleanToOpacityConverter x:Key="BooleanToOpacityConverter"/>
    <converters:InvertedBooleanToVisibilityConverter x:Key="InvertedBooleanToVisibilityConverter"/>
    <converters:SingleItemToCollectionConverter x:Key="SingleItemToCollectionConverter"/>
    <converters:TimeSpanFormatter x:Key="TimeSpanFormatter"/>

    <InputBindingCollection x:Key="ExpansionInputBindings" x:Shared="False">
      <MouseBinding MouseAction="LeftDoubleClick" 
                    Command="{Binding ToggleExpansionCommand}"/>
    </InputBindingCollection>

    <InputBindingCollection x:Key="NavigationInputBindings" x:Shared="False">
      <MouseBinding MouseAction="LeftDoubleClick" 
                    Command="{Binding DataContext.NavigateToTestCommand, Source={x:Reference _testTreeView}}"
                    CommandParameter="{Binding}"/>
    </InputBindingCollection>

    <HierarchicalDataTemplate x:Key="TestItemTemplate" DataType="{x:Type viewModels:TestItemViewModel}" ItemsSource="{Binding FlattenedChildren}">
      <Border Background="Transparent">
        <DockPanel Margin="1,3">
          <Grid DockPanel.Dock="Left" Margin="0,0,3,0" Opacity="{Binding IsStateUpToDate, Converter={StaticResource BooleanToOpacityConverter}}">
            <Image x:Name="_icon" Source="{Binding IconPath}" Stretch="None"/>
            <Image x:Name="_overlayIcon" Stretch="Uniform" Width="9" VerticalAlignment="Bottom" HorizontalAlignment="Right"
                   Source="{Binding OverlayIconPath}" 
                   Visibility="{Binding OverlayIconPath, Converter={StaticResource NullToVisibilityConverter}}"/>
          </Grid>
          <Label x:Name="_durationIndicator" DockPanel.Dock="Right" Margin="3,0,0,0"
                 Content="{Binding Duration, Converter={StaticResource TimeSpanFormatter}}"
                 Opacity="0.5"/>
          <Label x:Name="_testCountIndicator" DockPanel.Dock="Right" Margin="3,0,0,0"
                 Content="{Binding TestCount}" ContentStringFormat="({0})"/>
          <TextBlock x:Name="_testName" TextTrimming="CharacterEllipsis"/>
        </DockPanel>
      </Border>
      <HierarchicalDataTemplate.Triggers>
        <DataTrigger Binding="{Binding Duration.Ticks}" Value="0">
          <Setter TargetName="_durationIndicator" Property="Visibility" Value="Collapsed"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="Tree">
          <Setter TargetName="_testName" Property="Text" Value="{Binding FlattenedName}"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="List">
          <Setter TargetName="_testName" Property="Text" Value="{Binding DisplayName}"/>
          <Setter TargetName="_durationIndicator" Property="Visibility" Value="Collapsed"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding HasChildren}" Value="False">
          <Setter TargetName="_testCountIndicator" Property="Visibility" Value="Collapsed"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding CodeItem.Kind}" Value="Data">
          <Setter TargetName="_testCountIndicator" Property="Visibility" Value="Collapsed"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding IsCoverOnBuild}" Value="True">
          <Setter TargetName="_icon" Property="Source" Value="/AxoCover;component/Resources/refresh.png"/>
        </DataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsCoverOnBuild}" Value="True"/>
            <Condition Binding="{Binding CodeItem.Kind}" Value="Method"/>
          </MultiDataTrigger.Conditions>
          <Setter TargetName="_overlayIcon" Property="Visibility" Value="Visible"/>
          <Setter TargetName="_overlayIcon" Property="Source" Value="{Binding IconPath}"/>
        </MultiDataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="Tree"/>
            <Condition Binding="{Binding HasChildren}" Value="True"/>
          </MultiDataTrigger.Conditions>
          <Setter Property="views:Extensions.InputBindings" Value="{StaticResource ExpansionInputBindings}"/>
        </MultiDataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="Tree"/>
            <Condition Binding="{Binding HasChildren}" Value="False"/>
          </MultiDataTrigger.Conditions>
          <Setter Property="views:Extensions.InputBindings" Value="{StaticResource NavigationInputBindings}"/>
        </MultiDataTrigger>
        <DataTrigger Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="List">
          <Setter Property="views:Extensions.InputBindings" Value="{StaticResource NavigationInputBindings}"/>
        </DataTrigger>
      </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>

    <Style x:Key="TabIcon" TargetType="Image">
      <Setter Property="Stretch" Value="Uniform"/>
      <Setter Property="Width" Value="16"/>
      <Setter Property="Height" Value="16"/>
      <Setter Property="Margin" Value="3"/>
      <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="TabText" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
      <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <ContextMenu x:Key="TestItemMenu" x:Shared="False" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
      <MenuItem Header="{x:Static res:Resources.RunTests}" CommandParameter="{Binding}"
                Command="{Binding DataContext.RunTestsCommand, Source={x:Reference _dataContextSource}}">
        <MenuItem.Icon>
          <Image Source="/AxoCover;component/Resources/test.png"/>
        </MenuItem.Icon>
      </MenuItem>
      <MenuItem Header="{x:Static res:Resources.CoverTests}" CommandParameter="{Binding}"
                Command="{Binding DataContext.CoverTestsCommand, Source={x:Reference _dataContextSource}}">
        <MenuItem.Icon>
          <Image Source="/AxoCover;component/Resources/cover.png"/>
        </MenuItem.Icon>
      </MenuItem>
      <MenuItem Header="{x:Static res:Resources.DebugTests}" CommandParameter="{Binding}"
                Command="{Binding DataContext.DebugTestsCommand, Source={x:Reference _dataContextSource}}">
        <MenuItem.Icon>
          <Image Source="/AxoCover;component/Resources/debug.png"/>
        </MenuItem.Icon>
      </MenuItem>
      <MenuItem Header="-"/>
      <MenuItem Header="{x:Static res:Resources.AutoCover}"
                IsCheckable="True"
                IsChecked="{Binding IsCoverOnBuild}"/>
      <MenuItem Header="{x:Static res:Resources.GoToSource}" CommandParameter="{Binding}"
                Visibility="{Binding CanGoToSource, Converter={StaticResource BooleanToVisibilityConverter}}"
                Command="{Binding DataContext.NavigateToTestCommand, Source={x:Reference _dataContextSource}}"/>      
    </ContextMenu>

    <Style x:Key="TestListBoxItem" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
      <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
      <Setter Property="ContextMenu" Value="{StaticResource TestItemMenu}"/>
      <EventSetter Event="MouseDown" Handler="OnListTestItemMouseDown"/>
      <Setter Property="views:Extensions.LayoutMode" Value="List"/>
    </Style>
  </UserControl.Resources>

  <Grid>
    <Border x:Name="_dataContextSource"/>

    <!-- Hack: trap phantom keyboard focus on solution load, which would change the tab selection otherwise -->
    <CheckBox />

    <DockPanel Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}">
      <!-- Status bar -->
      <Grid DockPanel.Dock="Bottom" Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}">
        <ProgressBar x:Name="_progressBar" Height="3" VerticalAlignment="Bottom"
                     Background="Transparent" BorderThickness="0" 
                     IsIndeterminate="{Binding IsProgressIndeterminate}"
                     Value="{Binding Progress}" Maximum="1"
                     Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        <Label Content="{Binding StatusMessage}" VerticalAlignment="Center" Margin="3"/>
      </Grid>

      <!-- Main view -->
      <Grid>
        <TabControl TabStripPlacement="Top">
          <TabControl.Items>
            <!-- Tests view -->
            <TabItem IsSelected="{Binding IsTestsTabSelected}">
              <TabItem.Header>
                <StackPanel Orientation="Horizontal">
                  <Image Source="{DynamicResource TestsIcon}" Style="{StaticResource TabIcon}"/>
                  <Label Content="{x:Static res:Resources.TestsHeader}" Style="{StaticResource TabText}"/>
                </StackPanel>
              </TabItem.Header>

              <Grid>
                <DockPanel Visibility="{Binding IsSolutionLoaded, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"
                           VerticalAlignment="Center" HorizontalAlignment="Center">
                  <TextBlock Visibility="{Binding IsSolutionLoading, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"
                             Text="{x:Static res:Resources.Introduction}"
                             DockPanel.Dock="Bottom"
                             HorizontalAlignment="Center"
                             Margin="12,0"
                             TextAlignment="Center"
                             TextWrapping="Wrap"/>
                  <StackPanel Visibility="{Binding IsSolutionLoading, Converter={StaticResource BooleanToVisibilityConverter}}"
                              DockPanel.Dock="Bottom" 
                              HorizontalAlignment="Center"
                              Orientation="Horizontal">
                    <controls:Spinner Margin="3" VerticalAlignment="Center" />
                    <TextBlock Text="{x:Static res:Resources.LoadingSolution}" Margin="3" VerticalAlignment="Center"/>
                  </StackPanel>
                  <Viewbox Stretch="Uniform" Margin="12" MaxWidth="400">
                    <DockPanel>
                      <TextBlock FontSize="48" DockPanel.Dock="Bottom" VerticalAlignment="Bottom" HorizontalAlignment="Center"
                                 TextOptions.TextFormattingMode="Ideal">
                        <Run Text="Axo"/><Run Text="Cover" FontWeight="Bold"/>
                      </TextBlock>
                      <Path Stretch="Uniform" Opacity="0.2" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="24,12"
                            Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}" 
                            Data="F1 M 0,-50.007C -27.6181,-50.007 -50.007,-27.6181 -50.007,0C -50.007,19.3237 -39.0465,36.0875 -23.0032,44.4137L -23.0032,69.8647L -124.226,245.188L -146.164,257.854C -153.923,252.904 -163.138,250.035 -173.024,250.035C -200.642,250.035 -223.031,272.424 -223.031,300.042C -223.031,327.66 -200.642,350.049 -173.024,350.049C -145.406,350.049 -123.017,327.66 -123.017,300.042C -123.017,299.239 -123.036,298.44 -123.073,297.646L -101.23,285.035L 101.198,285.017L 123.073,297.646C 123.036,298.44 123.017,299.239 123.017,300.042C 123.017,327.66 145.406,350.049 173.024,350.049C 200.642,350.049 223.031,327.66 223.031,300.042C 223.031,272.424 200.642,250.035 173.024,250.035C 163.138,250.035 153.923,252.904 146.164,257.854L 124.311,245.237L 23.0032,69.767L 23.0032,44.4137C 39.0465,36.0876 50.007,19.3237 50.007,0C 50.007,-27.6181 27.6181,-50.007 0,-50.007 Z M 0,-80.0108C 44.1889,-80.0108 80.0111,-44.1885 80.0111,0.000366211C 80.0111,24.1967 69.2706,45.8845 52.2971,60.5561L 146.89,224.396C 155.08,221.567 163.873,220.031 173.024,220.031C 217.213,220.031 253.035,255.853 253.035,300.042C 253.035,344.231 217.213,380.053 173.024,380.053C 133.963,380.053 101.439,352.062 94.417,315.044L -94.4171,315.044C -101.439,352.062 -133.963,380.053 -173.024,380.053C -217.213,380.053 -253.035,344.231 -253.035,300.042C -253.035,255.853 -217.213,220.031 -173.024,220.031C -163.866,220.031 -155.067,221.569 -146.872,224.402L -52.2823,60.5689C -69.2644,45.8971 -80.0111,24.2037 -80.0111,0.000366211C -80.0111,-44.1886 -44.1889,-80.0108 0,-80.0108 Z ">
                      </Path>
                    </DockPanel>
                  </Viewbox>
                </DockPanel>

                <Grid Visibility="{Binding IsSolutionLoaded, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <DockPanel Visibility="{Binding TestSolution.IsEmpty, Converter={StaticResource InvertedBooleanToVisibilityConverter}}">
                    <UniformGrid Rows="1" DockPanel.Dock="Top">
                      <controls:ActionButton Text="{x:Static res:Resources.Run}"
                                             Icon="/AxoCover;component/Resources/test.png"
                                             CommandParameter="{Binding SelectedTestItem}"
                                             Command="{Binding RunTestsCommand}"
                                             Visibility="{Binding IsNotTesting, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                      <controls:ActionButton Text="{x:Static res:Resources.Cover}"
                                             Icon="/AxoCover;component/Resources/cover.png"
                                             CommandParameter="{Binding SelectedTestItem}"
                                             Command="{Binding CoverTestsCommand}"
                                             Visibility="{Binding IsNotTesting, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                      <controls:ActionButton Text="{x:Static res:Resources.AbortTests}"
                                             Icon="/AxoCover;component/Resources/abortTests.png"
                                             Command="{Binding AbortTestsCommand}"
                                             Visibility="{Binding IsTesting, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                      <controls:ActionButton Text="{x:Static res:Resources.BuildAndRefresh}"
                                             Icon="/AxoCover;component/Resources/build.png"
                                             Command="{Binding BuildCommand}"/>
                      <controls:ActionButton Text="{x:Static res:Resources.CollapseAll}"
                                             Icon="/AxoCover;component/Resources/collapse.png"
                                             Command="{Binding CollapseAllCommand}"
                                             Visibility="{Binding IsFiltering, Source={x:Reference _searchBox}, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"/>
                    </UniformGrid>

                    <controls:SearchBox DockPanel.Dock="Top" x:Name="_searchBox"
                                        PlaceholderText="{x:Static res:Resources.TestSearchPlaceholder}"
                                        Text="{Binding SearchViewModel.FilterText, UpdateSourceTrigger=PropertyChanged}"
                                        TextChanged="OnSearchTextChanged"/>
                    <views:TestDetailsView DockPanel.Dock="Bottom" SelectedItem="{Binding SelectedTestItem}"/>
                    <Grid>
                      <TreeView x:Name="_testTreeView" Background="Transparent" BorderThickness="0" 
                                SelectedItemChanged="OnSelectedTestItemChanged"
                                ItemsSource="{Binding TestSolution, Converter={StaticResource SingleItemToCollectionConverter}}" 
                                ItemTemplate="{StaticResource TestItemTemplate}">
                        <TreeView.InputBindings>
                          <KeyBinding Key="Return"
                                      Command="{Binding NavigateToTestCommand}"
                                      CommandParameter="{Binding SelectedTestItem}"/>
                        </TreeView.InputBindings>                        
                        <TreeView.ItemContainerStyle>
                          <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                            <Setter Property="ContextMenu" Value="{StaticResource TestItemMenu}"/>
                            <EventSetter Event="Selected" Handler="OnTestItemSelected"/>
                            <EventSetter Event="MouseDown" Handler="OnTreeTestItemMouseDown"/>
                            <Setter Property="views:Extensions.LayoutMode" Value="Tree"/>
                          </Style>
                        </TreeView.ItemContainerStyle>
                      </TreeView>
                      <DockPanel Visibility="{Binding IsFiltering, Source={x:Reference _searchBox}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                 Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}">
                        <TextBlock HorizontalAlignment="Center" TextWrapping="Wrap" Text="{x:Static res:Resources.ResultsTrimmed}" 
                                   DockPanel.Dock="Top" TextAlignment="Center" Margin="3"
                                   Visibility="{Binding SearchViewModel.IsResultTrimmed, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <ListBox ItemsSource="{Binding SearchViewModel.CodeItemList}"
                                 ItemTemplate="{StaticResource TestItemTemplate}"
                                 SelectedItem="{Binding SelectedTestItem}"
                                 ItemContainerStyle="{StaticResource TestListBoxItem}"/>
                      </DockPanel>
                    </Grid>
                  </DockPanel>

                  <!-- Placeholder for empty solutions -->
                  <StackPanel VerticalAlignment="Center" MaxWidth="256"
                              Visibility="{Binding TestSolution.IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <TextBlock Text="{x:Static res:Resources.TestExplorerPlaceholder}"
                               TextWrapping="Wrap" Margin="12" HorizontalAlignment="Center" TextAlignment="Center"/>
                    <controls:ActionButton Text="{x:Static res:Resources.OpenCoverageReport}"
                                           Icon="/AxoCover;component/Resources/open.png"
                                           Command="{Binding OpenCoverageReportCommand}"
                                           Margin="12" HorizontalAlignment="Center"/>
                    <StackPanel Margin="12">
                      <TextBlock HorizontalAlignment="Center" TextWrapping="Wrap" Text="{x:Static res:Resources.SupportedTestFrameworks}" Margin="3"/>
                      <WrapPanel HorizontalAlignment="Center">
                        <WrapPanel.Resources>
                          <Style TargetType="Image">
                            <Setter Property="Width" Value="48"/>
                            <Setter Property="Height" Value="48"/>
                            <Setter Property="Margin" Value="3"/>
                          </Style>
                          <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Setter Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="Margin" Value="3"/>
                          </Style>
                          <Style TargetType="DockPanel">
                            <Setter Property="Margin" Value="6"/>
                          </Style>
                        </WrapPanel.Resources>
                        <DockPanel>
                          <TextBlock TextAlignment="Center">
                            <Run>MSTest</Run>
                            <LineBreak/>
                            <Run>1 + 2</Run>
                          </TextBlock>
                          <Image Source="/AxoCover;component/Resources/mstest.png"/>
                        </DockPanel>
                        <DockPanel>
                          <TextBlock TextAlignment="Center">
                            <Run>NUnit</Run>
                            <LineBreak/>
                            <Run>2.6 + 3.7</Run>
                          </TextBlock>
                          <Image Source="/AxoCover;component/Resources/nunit.png"/>
                        </DockPanel>
                        <DockPanel>
                          <TextBlock TextAlignment="Center">
                            <Run>xUnit</Run>
                            <LineBreak/>
                            <Run>2.2</Run>
                          </TextBlock>
                          <Image Source="/AxoCover;component/Resources/xunit.png"/>
                        </DockPanel>
                      </WrapPanel>
                      <TextBlock HorizontalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" Margin="3" Opacity="0.5"
                                 Text="{x:Static res:Resources.FrameworkNote}"/>
                    </StackPanel>
                    <TextBlock HorizontalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" Margin="12" 
                               Text="{x:Static res:Resources.DesktopOnlyNote}"/>
                  </StackPanel>
                </Grid>
              </Grid>
            </TabItem>

            <!-- Passed state group -->
            <TabItem Visibility="{Binding PassedStateGroup.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                     IsSelected="{Binding PassedStateGroup.IsSelected}">
              <TabItem.Header>
                <StackPanel Orientation="Horizontal">
                  <Image Source="{DynamicResource PassedIcon}" Style="{StaticResource TabIcon}"/>
                  <Label Content="{Binding PassedStateGroup.Count}" Style="{StaticResource TabText}"/>
                </StackPanel>
              </TabItem.Header>

              <DockPanel>
                <views:TestDetailsView SelectedItem="{Binding PassedStateGroup.SelectedTestItem}" DockPanel.Dock="Bottom"/>
                <ListBox Background="Transparent"
                         ItemsSource="{Binding PassedStateGroup.Items}"
                         ItemTemplate="{StaticResource TestItemTemplate}"
                         SelectedItem="{Binding PassedStateGroup.SelectedTestItem}"
                         ItemContainerStyle="{StaticResource TestListBoxItem}">
                  <ListBox.InputBindings>
                    <KeyBinding Key="Return"
                                Command="{Binding NavigateToTestCommand}"
                                CommandParameter="{Binding PassedStateGroup.SelectedTestItem}"/>
                  </ListBox.InputBindings>
                </ListBox>
              </DockPanel>
            </TabItem>

            <!-- Inconclusive state group -->
            <TabItem Visibility="{Binding InconclusiveStateGroup.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                     IsSelected="{Binding InconclusiveStateGroup.IsSelected}">
              <TabItem.Header>
                <StackPanel Orientation="Horizontal">
                  <Image Source="{DynamicResource WarningIcon}" Style="{StaticResource TabIcon}"/>
                  <Label Content="{Binding InconclusiveStateGroup.Count}" Style="{StaticResource TabText}"/>
                </StackPanel>
              </TabItem.Header>

              <DockPanel>
                <views:TestDetailsView SelectedItem="{Binding InconclusiveStateGroup.SelectedTestItem}" DockPanel.Dock="Bottom"/>
                <ListBox Background="Transparent"
                         ItemsSource="{Binding InconclusiveStateGroup.Items}"
                         ItemTemplate="{StaticResource TestItemTemplate}"
                         SelectedItem="{Binding InconclusiveStateGroup.SelectedTestItem}"
                         ItemContainerStyle="{StaticResource TestListBoxItem}">
                  <ListBox.InputBindings>
                    <KeyBinding Key="Return"
                                Command="{Binding NavigateToTestCommand}"
                                CommandParameter="{Binding InconclusiveStateGroup.SelectedTestItem}"/>
                  </ListBox.InputBindings>
                </ListBox>
              </DockPanel>
            </TabItem>

            <!-- Failed state group -->
            <TabItem Visibility="{Binding FailedStateGroup.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                     IsSelected="{Binding FailedStateGroup.IsSelected}">
              <TabItem.Header>
                <StackPanel Orientation="Horizontal">
                  <Image Source="{DynamicResource ErrorIcon}" Style="{StaticResource TabIcon}"/>
                  <Label Content="{Binding FailedStateGroup.Count}" Style="{StaticResource TabText}"/>
                </StackPanel>
              </TabItem.Header>

              <DockPanel>
                <views:TestDetailsView SelectedItem="{Binding FailedStateGroup.SelectedTestItem}" DockPanel.Dock="Bottom"/>
                <ListBox Background="Transparent"
                         ItemsSource="{Binding FailedStateGroup.Items}"
                         ItemTemplate="{StaticResource TestItemTemplate}"
                         SelectedItem="{Binding FailedStateGroup.SelectedTestItem}"
                         ItemContainerStyle="{StaticResource TestListBoxItem}">
                  <ListBox.InputBindings>
                    <KeyBinding Key="Return"
                                Command="{Binding NavigateToTestCommand}"
                                CommandParameter="{Binding FailedStateGroup.SelectedTestItem}"/>
                  </ListBox.InputBindings>
                </ListBox>
              </DockPanel>
            </TabItem>

            <!-- Coverage view -->
            <TabItem IsSelected="{Binding IsReportTabSelected}" Visibility="{Binding IsReportAvailable, Converter={StaticResource BooleanToVisibilityConverter}}">
              <TabItem.Header>
                <StackPanel Orientation="Horizontal">
                  <Image Source="{DynamicResource CoverageIcon}" Style="{StaticResource TabIcon}"/>
                  <Label Content="{x:Static res:Resources.CoverageHeader}" Style="{StaticResource TabText}"/>
                </StackPanel>
              </TabItem.Header>

              <views:CoverageExplorerView />
            </TabItem>

            <!-- Settings view -->
            <TabItem IsSelected="{Binding IsSettingsTabSelected}">
              <TabItem.Header>
                <StackPanel Orientation="Horizontal">
                  <Image Source="{DynamicResource SettingsIcon}" Style="{StaticResource TabIcon}"/>
                  <Label Content="{x:Static res:Resources.SettingsHeader}" Style="{StaticResource TabText}"/>
                </StackPanel>
              </TabItem.Header>

              <views:SettingsView IsSelected="{Binding IsSettingsTabSelected}"/>
            </TabItem>
          </TabControl.Items>
        </TabControl>
      </Grid>
    </DockPanel>
  </Grid>
</views:View>
