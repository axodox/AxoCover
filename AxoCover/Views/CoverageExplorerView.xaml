<views:View x:Class="AxoCover.Views.CoverageExplorerView"
            x:TypeArguments="viewModels:CoverageExplorerViewModel"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
            xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
            xmlns:converters="clr-namespace:AxoCover.Converters"
            xmlns:controls="clr-namespace:AxoCover.Controls"
            xmlns:models="clr-namespace:AxoCover.Models"
            xmlns:viewModels="clr-namespace:AxoCover.ViewModels"
            xmlns:views="clr-namespace:AxoCover.Views"
            xmlns:res="clr-namespace:AxoCover"
            mc:Ignorable="d" d:DesignHeight="300" d:DesignWidth="300">
  <UserControl.Resources>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:InvertedBooleanToVisibilityConverter x:Key="InvertedBooleanToVisibilityConverter"/>
    <converters:InvertedNullToVisibilityConverter x:Key="InvertedNullToVisibilityConverter"/>
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    <converters:SingleItemToCollectionConverter x:Key="SingleItemToCollectionConverter"/>
    <converters:CoveragePercentageToBrushConverter x:Key="CoveragePercentageToBrushConverter"/>
    <converters:StringEqualityToVisibilityConverter x:Key="StringEqualityToVisibilityConverter"/>
    <converters:EnumToViewModelConverter x:Key="EnumToViewModelConverter"/>

    <InputBindingCollection x:Key="ExpansionInputBindings" x:Shared="False">
      <MouseBinding MouseAction="LeftDoubleClick" 
                    Command="{Binding ToggleExpansionCommand}"/>
    </InputBindingCollection>

    <InputBindingCollection x:Key="NavigationInputBindings" x:Shared="False">
      <MouseBinding MouseAction="LeftDoubleClick" 
                    Command="{Binding DataContext.NavigateToCoverageItemCommand, Source={x:Reference _dataContextSource}}"
                    CommandParameter="{Binding CodeItem}"/>
    </InputBindingCollection>

    <HierarchicalDataTemplate x:Key="ResultItemTemplate" DataType="{x:Type viewModels:CoverageItemViewModel}" ItemsSource="{Binding FlattenedChildren}">
      <Border Background="Transparent">
        <DockPanel Margin="1,3">
          <Grid DockPanel.Dock="Left" Margin="0,0,3,0">
            <Image Source="{Binding IconPath}" Stretch="None"/>
            <Ellipse Width="9" Height="9" VerticalAlignment="Bottom" HorizontalAlignment="Right"
                     Fill="{Binding BranchCoverage, Converter={StaticResource CoveragePercentageToBrushConverter}}"/>
          </Grid>
          <Rectangle Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"
                     Width="100" Height="2" DockPanel.Dock="Bottom" HorizontalAlignment="Left"
                     Visibility="{Binding Path=(views:Extensions.LayoutMode), ConverterParameter=Tree, Converter={StaticResource StringEqualityToVisibilityConverter}, RelativeSource={RelativeSource Self}}">
            <Rectangle.RenderTransform>
              <ScaleTransform CenterX="0" CenterY="0" ScaleX="{Binding UncoveredBranchPointRatio}" ScaleY="1"/>
            </Rectangle.RenderTransform>
          </Rectangle>
          <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
            <Image Source="/AxoCover;component/Resources/branch.png" Stretch="Uniform" Width="9" Margin="3,0,0,0"/>
            <Label Content="{Binding BranchCoverage}" ContentStringFormat="{}{0:F2}%" Margin="3,0,0,0"/>
            <Label Content="{Binding UncoveredBranchPoints}" ContentStringFormat="{}({0})" Margin="3,0,0,0"/>
            <Image Source="/AxoCover;component/Resources/sequence.png" Stretch="Uniform" Width="9" Margin="3,0,0,0"/>
            <Label Content="{Binding SequenceCoverage}" ContentStringFormat="{}{0:F2}%" Margin="3,0,0,0"/>
            <Label Content="{Binding UncoveredSequencePoints}" ContentStringFormat="{}({0})" Margin="3,0,0,0"/>
          </StackPanel>
          <Label x:Name="_testName"/>
        </DockPanel>
      </Border>
      <HierarchicalDataTemplate.Triggers>
        <DataTrigger Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="Tree">
          <Setter TargetName="_testName" Property="Content" Value="{Binding FlattenedName}"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="List">
          <Setter TargetName="_testName" Property="Content" Value="{Binding CodeItem.DisplayName}"/>
        </DataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="Tree"/>
            <Condition Binding="{Binding HasChildren}" Value="True"/>
          </MultiDataTrigger.Conditions>
          <Setter Property="views:Extensions.InputBindings" Value="{StaticResource ExpansionInputBindings}"/>
        </MultiDataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="Tree"/>
            <Condition Binding="{Binding HasChildren}" Value="False"/>
          </MultiDataTrigger.Conditions>
          <Setter Property="views:Extensions.InputBindings" Value="{StaticResource NavigationInputBindings}"/>
        </MultiDataTrigger>
        <DataTrigger Binding="{Binding Path=(views:Extensions.LayoutMode), RelativeSource={RelativeSource Self}}" Value="List">
          <Setter Property="views:Extensions.InputBindings" Value="{StaticResource NavigationInputBindings}"/>
        </DataTrigger>
      </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>

    <ContextMenu x:Key="ResultItemMenu" x:Shared="False" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
      <MenuItem Header="{x:Static res:Resources.GoToSource}" IsEnabled="{Binding CanGoToSource}"
                CommandParameter="{Binding CodeItem}"
                Command="{Binding DataContext.NavigateToCoverageItemCommand, Source={x:Reference _dataContextSource}}">
        <MenuItem.Icon>
          <Image Source="/AxoCover;component/Resources/source.png"/>
        </MenuItem.Icon>
      </MenuItem>
    </ContextMenu>
  </UserControl.Resources>
  <Grid>
    <Border x:Name="_dataContextSource"/>

    <TextBlock Text="{x:Static res:Resources.CoverageExplorerPlaceholder}" 
               TextWrapping="Wrap" Margin="12" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"
               Visibility="{Binding ResultSolution, Converter={StaticResource InvertedNullToVisibilityConverter}}"/>

    <DockPanel Visibility="{Binding ResultSolution, Converter={StaticResource NullToVisibilityConverter}}">
      <UniformGrid Rows="1" DockPanel.Dock="Top">
        <controls:ActionButton Text="{x:Static res:Resources.OpenReport}"
                               Icon="/AxoCover;component/Resources/open.png"
                               Command="{Binding OpenReportCommand}"/>
        
        <controls:ActionButton Text="{x:Static res:Resources.GenerateReport}"
                               Icon="/AxoCover;component/Resources/export.png"
                               Command="{Binding GenerateReportCommand}"/>
        
        <ComboBox ItemsSource="{Binding Ordering, Converter={StaticResource EnumToViewModelConverter}}"
                  SelectedValue="{Binding Ordering}"
                  SelectedValuePath="Value"
                  HorizontalContentAlignment="Center">
          <ComboBox.ItemTemplate>
            <DataTemplate>
              <StackPanel Orientation="Horizontal">
                <Image Source="/AxoCover;component/Resources/sort.png" Stretch="None" Margin="3,0"/>
                <TextBlock Text="{Binding Name}" Margin="3,0"/>
              </StackPanel>
            </DataTemplate>
          </ComboBox.ItemTemplate>
        </ComboBox>

        <controls:ActionButton Text="{x:Static res:Resources.CollapseAll}"
                               Icon="/AxoCover;component/Resources/collapse.png"
                               Command="{Binding CollapseAllCommand}"
                               Visibility="{Binding IsFiltering, Source={x:Reference _searchBox}, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"/>
      </UniformGrid>
      
      <controls:SearchBox DockPanel.Dock="Top" x:Name="_searchBox"
                          PlaceholderText="{x:Static res:Resources.CoverageSearchPlaceholder}"
                          Text="{Binding SearchViewModel.FilterText, UpdateSourceTrigger=PropertyChanged}"
                          TextChanged="OnSearchTextChanged"/>
      
      <views:CoverageDetailsView DockPanel.Dock="Bottom" SelectedItem="{Binding SelectedCoverageItem}"/>
      
      <Grid>
        <TreeView x:Name="_resultTreeView" BorderThickness="0" SelectedItemChanged="OnSelectedCoverageItemChanged"
                  Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
                  ItemsSource="{Binding ResultSolution, Converter={StaticResource SingleItemToCollectionConverter}}" 
                  ItemTemplate="{StaticResource ResultItemTemplate}">
          <TreeView.InputBindings>
            <KeyBinding Key="Return"
                        Command="{Binding NavigateToCoverageItemCommand}"
                        CommandParameter="{Binding SelectedCoverageItem.CodeItem}"/>
          </TreeView.InputBindings>
          <TreeView.ItemContainerStyle>
            <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
              <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
              <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
              <Setter Property="ContextMenu" Value="{StaticResource ResultItemMenu}"/>
              <EventSetter Event="Selected" Handler="OnResultItemSelected"/>
              <EventSetter Event="MouseDown" Handler="OnTreeResultItemMouseDown"/>
              <Setter Property="views:Extensions.LayoutMode" Value="Tree"/>
            </Style>
          </TreeView.ItemContainerStyle>
        </TreeView>
        <DockPanel Visibility="{Binding IsFiltering, Source={x:Reference _searchBox}, Converter={StaticResource BooleanToVisibilityConverter}}"
                   Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}">
          <TextBlock HorizontalAlignment="Center" TextWrapping="Wrap" Text="{x:Static res:Resources.ResultsTrimmed}"
                     DockPanel.Dock="Top" TextAlignment="Center" Margin="3"
                     Visibility="{Binding SearchViewModel.IsResultTrimmed, Converter={StaticResource BooleanToVisibilityConverter}}"/>
          <ListBox ItemsSource="{Binding SearchViewModel.CodeItemList}"
                   ItemTemplate="{StaticResource ResultItemTemplate}"
                   SelectedItem="{Binding SelectedCoverageItem}">
            <ListBox.ItemContainerStyle>
              <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                <Setter Property="ContextMenu" Value="{StaticResource ResultItemMenu}"/>
                <EventSetter Event="MouseDown" Handler="OnListResultItemMouseDown"/>
                <Setter Property="views:Extensions.LayoutMode" Value="List"/>
              </Style>
            </ListBox.ItemContainerStyle>
          </ListBox>
        </DockPanel>
      </Grid>
    </DockPanel>
  </Grid>
</views:View>
