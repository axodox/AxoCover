<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
                    xmlns:controls="clr-namespace:AxoCover.Controls">
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

  <Style TargetType="ContentPresenter">
    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    <Style.Triggers>
      <Trigger Property="controls:StyleManager.IsHighlighted" Value="True">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="TextBlock">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    <Style.Triggers>
      <Trigger Property="controls:StyleManager.IsHighlighted" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="Label">
    <Setter Property="Margin" Value="0"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Label">
          <ContentPresenter x:Name="_content" TextBlock.Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
          <ControlTemplate.Triggers>
            <Trigger Property="controls:StyleManager.IsHighlighted" Value="True">
              <Setter TargetName="_content" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>    
  </Style>

  <Style TargetType="Path">
    <Setter Property="Fill" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    <Style.Triggers>
      <Trigger Property="controls:StyleManager.IsHighlighted" Value="True">
        <Setter Property="Fill" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="Button">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    <Setter Property="Padding" Value="4"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="_border"
                  BorderThickness="0"
                  Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}">
            <ContentPresenter x:Name="_content"
                              Margin="{TemplateBinding Padding}"
                              VerticalAlignment="Center"
                              RecognizesAccessKey="True"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
              <Setter TargetName="_content" Property="controls:StyleManager.IsHighlighted" Value="True" />
              <Setter TargetName="_content" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ToggleButton">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="_border"
                  BorderThickness="0"
                  Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}">
            <ContentPresenter x:Name="_content"
                              Margin="2"
                              VerticalAlignment="Center"
                              RecognizesAccessKey="True"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
              <Setter TargetName="_content" Property="controls:StyleManager.IsHighlighted" Value="True" />
              <Setter TargetName="_content" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
              <Setter TargetName="_content" Property="controls:StyleManager.IsHighlighted" Value="True" />
              <Setter TargetName="_content" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ToolTip">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolTip">
          <Border Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolTipBrushKey}}"
                  BorderBrush="{DynamicResource {x:Static vsui:EnvironmentColors.ToolTipBorderBrushKey}}"
                  BorderThickness="1">
            <ContentPresenter Margin="3" TextBlock.Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolTipTextBrushKey}}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ListBoxItem">
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <Border x:Name="_border" Background="Transparent">
            <ContentPresenter x:Name="_content"
                              Content="{TemplateBinding Content}" 
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              controls:StyleManager.IsHighlighted="False"
                              Margin="3"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
              <Setter TargetName="_content" Property="controls:StyleManager.IsHighlighted" Value="True" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="ListBoxItem" x:Key="RadioButtonListBoxItem">
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <RadioButton Background="Transparent"
                       IsEnabled="{TemplateBinding IsEnabled}"
                       IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                       Content="{TemplateBinding Content}" 
                       ContentTemplate="{TemplateBinding ContentTemplate}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       Margin="3"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ListBox">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBox">
          <Grid>
            <ScrollViewer Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
                          HorizontalScrollBarVisibility="Disabled">
              <ItemsPresenter />
            </ScrollViewer>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate TargetType="ListBox" x:Key="FixedListBox">
    <ItemsPresenter />
  </ControlTemplate>

  <Style TargetType="ListBox" x:Key="RadioListBox">
    <Setter Property="Template" Value="{StaticResource FixedListBox}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource RadioButtonListBoxItem}"/>
  </Style>

  <Style TargetType="ToolBar">
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolBar">
          <Border Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}">
            <ItemsPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="TextBox">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxTextBrushKey}}"/>
    <Setter Property="CaretBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxTextBrushKey}}"/>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu>
          <MenuItem Header="Cut" Command="Cut"/>
          <MenuItem Header="Copy" Command="Copy"/>
          <MenuItem Header="Paste" Command="Paste"/>
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBoxBase">
          <Border Name="_border"
                CornerRadius="2" Padding="2" BorderThickness="1"
                Background="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxBackgroundBrushKey}}"
                BorderBrush="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxBorderBrushKey}}">
            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
          </Border>
          <ControlTemplate.Triggers>            
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxButtonMouseOverBackgroundBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
              <Setter TargetName="_border" Property="Opacity" Value="0.7"/>
              <Setter TargetName="_border" Property="BorderBrush" Value="Transparent"/>
              <Setter TargetName="_border" Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="_border" Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  
  <Style  TargetType="TabControl">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TabControl">
          <DockPanel ClipToBounds="True">
            <UniformGrid x:Name="_tabPanel" IsItemsHost="True" Panel.ZIndex="1" Margin="-1,0"
                        KeyboardNavigation.TabIndex="1"
                        Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
                        DockPanel.Dock="{TemplateBinding TabStripPlacement}"/>
            <Border KeyboardNavigation.TabNavigation="Local"
                    KeyboardNavigation.DirectionalNavigation="Contained"
                    KeyboardNavigation.TabIndex="2">
              <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" />
            </Border>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter TargetName="_tabPanel" Property="UniformGrid.Columns" Value="1"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Top">
              <Setter TargetName="_tabPanel" Property="UniformGrid.Rows" Value="1"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter TargetName="_tabPanel" Property="UniformGrid.Columns" Value="1"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter TargetName="_tabPanel" Property="UniformGrid.Rows" Value="1"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="TabItem">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TabItem">
          <Grid x:Name="Root">
            <Border x:Name="_border" Background="Transparent" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxBorderBrushKey}}">
              <ContentPresenter x:Name="_content" ContentSource="Header" Margin="3" VerticalAlignment="Center" HorizontalAlignment="Center" RecognizesAccessKey="True"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
            </Trigger>            
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}" />
              <Setter TargetName="_border" Property="BorderThickness" Value="1,1,1,0" />
              <Setter Property="Panel.ZIndex" Value="100" />
            </Trigger>            
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="RadioButton">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:HeaderColors.DefaultTextBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="16"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>            
            <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
              <Ellipse x:Name="_circle" Width="14" Height="14" StrokeThickness="1"
                       VerticalAlignment="Center" HorizontalAlignment="Center"
                       Stroke="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>

              <Ellipse x:Name="_dot" Width="8" Height="8" Visibility="Collapsed"
                       VerticalAlignment="Center" HorizontalAlignment="Center"
                       Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
            </Grid>
            <ContentPresenter Grid.Column="1"
                              x:Name="contentPresenter"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_circle" Property="Fill" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_dot" Property="Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ActionRadioButton" TargetType="RadioButton">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:HeaderColors.DefaultTextBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Border x:Name="_border"
                  BorderThickness="0"
                  Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}">
            <DockPanel x:Name="_content" controls:StyleManager.IsHighlighted="False" Margin="3"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <Grid DockPanel.Dock="Left" Margin="3" VerticalAlignment="Center">
                <Ellipse x:Name="_circle" Width="16" Height="16" StrokeThickness="1"
                         VerticalAlignment="Center" HorizontalAlignment="Center"
                         Stroke="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>

                <Ellipse x:Name="_dot" Width="10" Height="10" Visibility="Collapsed"
                         VerticalAlignment="Center" HorizontalAlignment="Center"
                         Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
              </Grid>
              <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="3"
                                Content="{TemplateBinding Content}" 
                                ContentTemplate="{TemplateBinding ContentTemplate}"/>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
              <Setter TargetName="_content" Property="controls:StyleManager.IsHighlighted" Value="True" />
              <Setter TargetName="_circle" Property="Stroke" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
              <Setter TargetName="_dot" Property="Fill" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
              <Setter TargetName="_content" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_dot" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ListBoxItem" x:Key="ActionRadioButtonListBoxItem">
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <RadioButton Style="{StaticResource ActionRadioButton}"
                       IsEnabled="{TemplateBinding IsEnabled}"
                       IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                       Content="{TemplateBinding Content}" 
                       ContentTemplate="{TemplateBinding ContentTemplate}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       Margin="3"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ListBox" x:Key="ActionListBox">
    <Setter Property="Template" Value="{StaticResource FixedListBox}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource ActionRadioButtonListBoxItem}"/>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <UniformGrid Rows="1"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="CheckBox">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:HeaderColors.DefaultTextBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Grid x:Name="_grid">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="16"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
              <Rectangle x:Name="_rectangle" Width="14" Height="14" StrokeThickness="1"
                         VerticalAlignment="Center" HorizontalAlignment="Center"
                         Stroke="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>

              <Path x:Name="_checkMark" Width="8" Height="8" StrokeThickness="2" Visibility="Collapsed" 
                    Data="M 0 4 L 2 8 M 2 8 L 8 0" VerticalAlignment="Center" HorizontalAlignment="Center"
                    Stroke="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>

              <Rectangle x:Name="_indeterminateMark" Width="8" Height="8" Visibility="Collapsed"
                         VerticalAlignment="Center" HorizontalAlignment="Center"
                         Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
            </Grid>
            <ContentPresenter Grid.Column="1"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_rectangle" Property="Fill" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_checkMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
              <Setter TargetName="_indeterminateMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="_grid" Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ActionCheckBox" TargetType="CheckBox">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:HeaderColors.DefaultTextBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Border x:Name="_border"
                  BorderThickness="0"
                  Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}">
            <DockPanel x:Name="_content" controls:StyleManager.IsHighlighted="False" Margin="3"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <Grid DockPanel.Dock="Left" Margin="3" VerticalAlignment="Center">
                <Rectangle x:Name="_rectangle" Width="16" Height="16" StrokeThickness="1"
                           VerticalAlignment="Center" HorizontalAlignment="Center"
                           Stroke="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>

                <Path x:Name="_checkMark" Width="10" Height="10" StrokeThickness="2" Visibility="Collapsed" Stretch="Uniform"
                      Data="M 0 4 L 2 8 M 2 8 L 8 0" VerticalAlignment="Center" HorizontalAlignment="Center"
                      Stroke="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>

                <Rectangle x:Name="_indeterminateMark" Width="10" Height="10" Visibility="Collapsed"
                           VerticalAlignment="Center" HorizontalAlignment="Center"
                           Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
              </Grid>
              <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="3"
                                Content="{TemplateBinding Content}" 
                                ContentTemplate="{TemplateBinding ContentTemplate}"/>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
              <Setter TargetName="_content" Property="controls:StyleManager.IsHighlighted" Value="True" />
              <Setter TargetName="_rectangle" Property="Stroke" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
              <Setter TargetName="_checkMark" Property="Stroke" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
              <Setter TargetName="_indeterminateMark" Property="Fill" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
              <Setter TargetName="_content" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_checkMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
              <Setter TargetName="_indeterminateMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="TreeView">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TreeView">
          <ScrollViewer Focusable="False"
                        CanContentScroll="False"
                        Padding="4">
            <ItemsPresenter />
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpandCollapseToggleButton" TargetType="ToggleButton">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid Width="15" Height="13" Background="Transparent">
            <Path x:Name="_collapsed"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Margin="1,1,1,1"
                  Data="M 4 0 L 8 4 L 4 8 Z"
                  Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}">
            </Path>
            <Path x:Name="_expanded"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Margin="1,1,1,1"
                  Data="M 1 7 L 7 7 L 7 1 Z"
                  Visibility="Hidden"
                  Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}">
            </Path>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_collapsed" Property="Visibility" Value="Hidden"/>
              <Setter TargetName="_expanded" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
              <Setter TargetName="_collapsed" Property="Visibility" Value="Visible"/>
              <Setter TargetName="_expanded" Property="Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  
  <Style x:Key="TreeViewItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="0,0,0,0"
                       StrokeThickness="5"
                       Stroke="Black"
                       StrokeDashArray="1 2"
                       Opacity="0" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="TreeViewItem">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding" Value="1,0,0,0" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TreeViewItem">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="19"
                              Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="_expander" ClickMode="Press"
                          Style="{StaticResource ExpandCollapseToggleButton}"
                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border x:Name="_border" Grid.Column="1"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
              <ContentPresenter x:Name="PART_Header" ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
            </Border>
            <ItemsPresenter x:Name="_itemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
              <Setter TargetName="_border" Property="controls:StyleManager.IsHighlighted" Value="True" />
            </Trigger>
            <Trigger Property="IsExpanded" Value="True">
              <Setter TargetName="_itemsHost" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
              <Setter TargetName="_expander" Property="Visibility" Value="Hidden" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasHeader" Value="False" />
                <Condition Property="Width" Value="Auto" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasHeader" Value="False" />
                <Condition Property="Height" Value="Auto" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="ContextMenu">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Grid.IsSharedSizeScope" Value="True" />
    <Setter Property="HasDropShadow" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ContextMenu">
          <Border Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBackgroundGradientBrushKey}}"
                  BorderBrush="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBorderBrushKey}}"
                  BorderThickness="1" Margin="3">
            <Border.Effect>
              <DropShadowEffect ShadowDepth="3" Opacity="0.445" RenderingBias="Quality"/>
            </Border.Effect>
            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="3" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="MenuItem">
    <Style.Triggers>
      <Trigger Property="Header" Value="-">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="MenuItem">
              <Separator Margin="3,0"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>      
    </Style.Triggers>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuItem">
          <Grid x:Name="_border" Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
              <ColumnDefinition Width="Auto" SharedSizeGroup="Header"/>
              <ColumnDefinition Width="Auto" SharedSizeGroup="Glyph"/>
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="_icon" ContentSource="Icon" Margin="3" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
            <Path x:Name="_checkMark" Width="8" Height="8" StrokeThickness="2" Visibility="Collapsed" 
                    Data="M 0 4 L 2 8 M 2 8 L 8 0" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"
                    Stroke="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
            <ContentPresenter x:Name="_header" ContentSource="Header" Margin="6,3" VerticalAlignment="Center" RecognizesAccessKey="True" Grid.Column="1"
                              TextBlock.Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
            <Path x:Name="_submenuSign" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
                  Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}" />
            <Popup x:Name="_submenu" 
                   Visibility="Collapsed"
                   Placement="Right"
                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                   AllowsTransparency="True" 
                   Focusable="False">
              <Border Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBackgroundGradientBrushKey}}"
                      BorderBrush="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBorderBrushKey}}"
                      BorderThickness="1" SnapsToDevicePixels="True">
                <StackPanel IsItemsHost="True" Margin="3" Grid.IsSharedSizeScope="True"
                            KeyboardNavigation.DirectionalNavigation="Cycle" />
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Role" Value="SubmenuHeader">
              <Setter TargetName="_submenuSign" Property="Visibility" Value="Visible"/>
              <Setter TargetName="_submenu" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
              <Setter TargetName="_icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_checkMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuItemMouseOverBrushKey}}"/>
              <Setter TargetName="_header" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuItemMouseOverTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="_border" Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="Separator">
    <Setter Property="Margin" Value="3"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
            <Border Margin="{TemplateBinding Margin}" Height="1" Opacity="0.5"
                    Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ComboBox">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="MinWidth" Value="120" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid>
            <ToggleButton x:Name="_toggleButton"
                          Grid.Column="2"
                          Focusable="false"
                          ClickMode="Press"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <DockPanel>
                <Border DockPanel.Dock="Right" Margin="3">
                  <Path HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="M 0 0 L 4 4 L 8 0 Z"
                        Style="{StaticResource {x:Type Path}}"/>
                </Border>
                <Grid Margin="3" Background="Transparent">
                  <ContentPresenter x:Name="_content"
                                    IsHitTestVisible="False"
                                    Content="{TemplateBinding SelectionBoxItem}"
                                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <ContentPresenter.Style>
                      <Style TargetType="ContentPresenter">
                        <Style.Triggers>
                          <Trigger Property="controls:StyleManager.IsHighlighted" Value="True">
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
                          </Trigger>
                        </Style.Triggers>
                      </Style>
                    </ContentPresenter.Style>
                  </ContentPresenter>
                  <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Bottom"
                            Focusable="True"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}" />
                </Grid>
              </DockPanel>
            </ToggleButton>
            <Popup Placement="Bottom"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Slide">
              <Grid SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding ActualWidth}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                <Border BorderThickness="1"
                        Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBackgroundGradientBrushKey}}"
                        BorderBrush="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBorderBrushKey}}"/>
                <ScrollViewer Margin="3" SnapsToDevicePixels="True">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  
  <Style TargetType="ComboBoxItem">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBoxItem">
          <Border x:Name="_border" Background="Transparent">
            <ContentPresenter x:Name="_content"
                              controls:StyleManager.IsHighlighted="False"
                              Margin="3"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
              <Setter TargetName="_content" Property="controls:StyleManager.IsHighlighted" Value="True" />
              <Setter TargetName="_content" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <SineEase x:Key="DefaultEasingFunction" EasingMode="EaseInOut"/>
  
  <Style TargetType="ProgressBar">
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxBorderBrushKey}}"/>
    <Setter Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ProgressBar">
          <Border BorderThickness="{TemplateBinding BorderThickness}" 
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Background="{TemplateBinding Background}">
            <Grid Name="_root">
              <Rectangle Name="PART_Track" />
              <Grid Name="PART_Indicator" HorizontalAlignment="Left" ClipToBounds="True">
                <Rectangle Fill="#FF329932" Name="_definiteIndicator" />
                <Viewbox Name="_indefiniteIndicator" Visibility="Collapsed" Stretch="Fill">
                  <Border ClipToBounds="True" Width="100" Height="1">
                    <Rectangle Width="70" HorizontalAlignment="Left">
                      <Rectangle.Fill>
                        <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                          <GradientStop Color="#00329932" Offset="0"/>
                          <GradientStop Color="#FF329932" Offset="0.5"/>
                          <GradientStop Color="#00329932" Offset="1"/>
                        </LinearGradientBrush>
                      </Rectangle.Fill>
                      <Rectangle.RenderTransform>
                        <TranslateTransform x:Name="_transform" X="-70"/>
                      </Rectangle.RenderTransform>
                      <Rectangle.Triggers>
                        <EventTrigger RoutedEvent="Rectangle.Loaded">
                          <BeginStoryboard>
                            <Storyboard RepeatBehavior="Forever" BeginTime="{Binding}" SpeedRatio="0.5">
                              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="_transform" Storyboard.TargetProperty="X">
                                <EasingDoubleKeyFrame KeyTime="0.0:0:0" Value="-70"/>
                                <EasingDoubleKeyFrame KeyTime="0.0:0:1" Value="100" EasingFunction="{StaticResource DefaultEasingFunction}" />
                              </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                          </BeginStoryboard>
                        </EventTrigger>
                      </Rectangle.Triggers>
                    </Rectangle>
                  </Border>                
                </Viewbox>
              </Grid>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ProgressBar.Orientation">
              <Setter Property="FrameworkElement.LayoutTransform" TargetName="_root">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
              <Trigger.Value>
                <x:Static Member="Orientation.Vertical" />
              </Trigger.Value>
            </Trigger>
            <Trigger Property="ProgressBar.IsIndeterminate" Value="True">
              <Setter Property="UIElement.Visibility" TargetName="_definiteIndicator" Value="Collapsed"/>
              <Setter Property="UIElement.Visibility" TargetName="_indefiniteIndicator" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderButton" TargetType="ToggleButton">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="_border"
                  BorderThickness="0"
                  Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}">
            <ContentPresenter x:Name="_content"
                              Margin="2"
                              VerticalAlignment="Center"
                              RecognizesAccessKey="True"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
              <Setter TargetName="_content" Property="controls:StyleManager.IsHighlighted" Value="True" />
              <Setter TargetName="_content" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ComboBoxMouseDownGlyphBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  
  <Style TargetType="Expander">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Expander">
          <StackPanel>
            <ToggleButton DockPanel.Dock="Right" VerticalAlignment="Center" Style="{StaticResource ExpanderButton}"
                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <ContentPresenter ContentSource="Header" Margin="3" RecognizesAccessKey="True" VerticalAlignment="Center" />
            </ToggleButton>
            <ContentPresenter Margin="3" Visibility="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>